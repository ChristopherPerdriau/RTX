# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.message_terms import MessageTerms  # noqa: F401,E501
from swagger_server.models.result import Result  # noqa: F401,E501
from swagger_server import util


class Message(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, context: str=None, type: str=None, id: str=None, reasoner_id: str=None, tool_version: str=None, schema_version: str=None, _datetime: str=None, n_results: int=None, message_code: str=None, code_description: str=None, table_column_names: List[str]=None, original_question: str=None, restated_question: str=None, query_type_id: str=None, terms: MessageTerms=None, query_options: object=None, results: List[Result]=None, query_graph: object=None, knowledge_graph: object=None, remote_knowledge_graph: object=None, log: List[str]=None):  # noqa: E501
        """Message - a model defined in Swagger

        :param context: The context of this Message.  # noqa: E501
        :type context: str
        :param type: The type of this Message.  # noqa: E501
        :type type: str
        :param id: The id of this Message.  # noqa: E501
        :type id: str
        :param reasoner_id: The reasoner_id of this Message.  # noqa: E501
        :type reasoner_id: str
        :param tool_version: The tool_version of this Message.  # noqa: E501
        :type tool_version: str
        :param schema_version: The schema_version of this Message.  # noqa: E501
        :type schema_version: str
        :param _datetime: The _datetime of this Message.  # noqa: E501
        :type _datetime: str
        :param n_results: The n_results of this Message.  # noqa: E501
        :type n_results: int
        :param message_code: The message_code of this Message.  # noqa: E501
        :type message_code: str
        :param code_description: The code_description of this Message.  # noqa: E501
        :type code_description: str
        :param table_column_names: The table_column_names of this Message.  # noqa: E501
        :type table_column_names: List[str]
        :param original_question: The original_question of this Message.  # noqa: E501
        :type original_question: str
        :param restated_question: The restated_question of this Message.  # noqa: E501
        :type restated_question: str
        :param query_type_id: The query_type_id of this Message.  # noqa: E501
        :type query_type_id: str
        :param terms: The terms of this Message.  # noqa: E501
        :type terms: MessageTerms
        :param query_options: The query_options of this Message.  # noqa: E501
        :type query_options: object
        :param results: The results of this Message.  # noqa: E501
        :type results: List[Result]
        :param query_graph: The query_graph of this Message.  # noqa: E501
        :type query_graph: object
        :param knowledge_graph: The knowledge_graph of this Message.  # noqa: E501
        :type knowledge_graph: object
        :param remote_knowledge_graph: The remote_knowledge_graph of this Message.  # noqa: E501
        :type remote_knowledge_graph: object
        :param log: The log of this Message.  # noqa: E501
        :type log: List[str]
        """
        self.swagger_types = {
            'context': str,
            'type': str,
            'id': str,
            'reasoner_id': str,
            'tool_version': str,
            'schema_version': str,
            '_datetime': str,
            'n_results': int,
            'message_code': str,
            'code_description': str,
            'table_column_names': List[str],
            'original_question': str,
            'restated_question': str,
            'query_type_id': str,
            'terms': MessageTerms,
            'query_options': object,
            'results': List[Result],
            'query_graph': object,
            'knowledge_graph': object,
            'remote_knowledge_graph': object,
            'log': List[str]
        }

        self.attribute_map = {
            'context': 'context',
            'type': 'type',
            'id': 'id',
            'reasoner_id': 'reasoner_id',
            'tool_version': 'tool_version',
            'schema_version': 'schema_version',
            '_datetime': 'datetime',
            'n_results': 'n_results',
            'message_code': 'message_code',
            'code_description': 'code_description',
            'table_column_names': 'table_column_names',
            'original_question': 'original_question',
            'restated_question': 'restated_question',
            'query_type_id': 'query_type_id',
            'terms': 'terms',
            'query_options': 'query_options',
            'results': 'results',
            'query_graph': 'query_graph',
            'knowledge_graph': 'knowledge_graph',
            'remote_knowledge_graph': 'remote_knowledge_graph',
            'log': 'log'
        }

        self._context = context
        self._type = type
        self._id = id
        self._reasoner_id = reasoner_id
        self._tool_version = tool_version
        self._schema_version = schema_version
        self.__datetime = _datetime
        self._n_results = n_results
        self._message_code = message_code
        self._code_description = code_description
        self._table_column_names = table_column_names
        self._original_question = original_question
        self._restated_question = restated_question
        self._query_type_id = query_type_id
        self._terms = terms
        self._query_options = query_options
        self._results = results
        self._query_graph = query_graph
        self._knowledge_graph = knowledge_graph
        self._remote_knowledge_graph = remote_knowledge_graph
        self._log = log

    @classmethod
    def from_dict(cls, dikt) -> 'Message':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Message of this Message.  # noqa: E501
        :rtype: Message
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self) -> str:
        """Gets the context of this Message.

        JSON-LD context URI  # noqa: E501

        :return: The context of this Message.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context: str):
        """Sets the context of this Message.

        JSON-LD context URI  # noqa: E501

        :param context: The context of this Message.
        :type context: str
        """

        self._context = context

    @property
    def type(self) -> str:
        """Gets the type of this Message.

        Entity type of this message  # noqa: E501

        :return: The type of this Message.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Message.

        Entity type of this message  # noqa: E501

        :param type: The type of this Message.
        :type type: str
        """

        self._type = type

    @property
    def id(self) -> str:
        """Gets the id of this Message.

        URI for this message  # noqa: E501

        :return: The id of this Message.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Message.

        URI for this message  # noqa: E501

        :param id: The id of this Message.
        :type id: str
        """

        self._id = id

    @property
    def reasoner_id(self) -> str:
        """Gets the reasoner_id of this Message.

        Identifier string of the reasoner that provided this message (one of RTX, Robokop, Indigo, Integrator, etc.)  # noqa: E501

        :return: The reasoner_id of this Message.
        :rtype: str
        """
        return self._reasoner_id

    @reasoner_id.setter
    def reasoner_id(self, reasoner_id: str):
        """Sets the reasoner_id of this Message.

        Identifier string of the reasoner that provided this message (one of RTX, Robokop, Indigo, Integrator, etc.)  # noqa: E501

        :param reasoner_id: The reasoner_id of this Message.
        :type reasoner_id: str
        """

        self._reasoner_id = reasoner_id

    @property
    def tool_version(self) -> str:
        """Gets the tool_version of this Message.

        Version label of the tool that generated this message  # noqa: E501

        :return: The tool_version of this Message.
        :rtype: str
        """
        return self._tool_version

    @tool_version.setter
    def tool_version(self, tool_version: str):
        """Sets the tool_version of this Message.

        Version label of the tool that generated this message  # noqa: E501

        :param tool_version: The tool_version of this Message.
        :type tool_version: str
        """

        self._tool_version = tool_version

    @property
    def schema_version(self) -> str:
        """Gets the schema_version of this Message.

        Version label of this JSON-LD schema  # noqa: E501

        :return: The schema_version of this Message.
        :rtype: str
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version: str):
        """Sets the schema_version of this Message.

        Version label of this JSON-LD schema  # noqa: E501

        :param schema_version: The schema_version of this Message.
        :type schema_version: str
        """

        self._schema_version = schema_version

    @property
    def _datetime(self) -> str:
        """Gets the _datetime of this Message.

        Datetime string for the time that this message was generated  # noqa: E501

        :return: The _datetime of this Message.
        :rtype: str
        """
        return self.__datetime

    @_datetime.setter
    def _datetime(self, _datetime: str):
        """Sets the _datetime of this Message.

        Datetime string for the time that this message was generated  # noqa: E501

        :param _datetime: The _datetime of this Message.
        :type _datetime: str
        """

        self.__datetime = _datetime

    @property
    def n_results(self) -> int:
        """Gets the n_results of this Message.

        Total number of results from the query (which may be less than what is returned if limits were placed on the number of results to return)  # noqa: E501

        :return: The n_results of this Message.
        :rtype: int
        """
        return self._n_results

    @n_results.setter
    def n_results(self, n_results: int):
        """Sets the n_results of this Message.

        Total number of results from the query (which may be less than what is returned if limits were placed on the number of results to return)  # noqa: E501

        :param n_results: The n_results of this Message.
        :type n_results: int
        """

        self._n_results = n_results

    @property
    def message_code(self) -> str:
        """Gets the message_code of this Message.

        Set to OK for success, or some other short string to indicate and error (e.g., KGUnavailable, TermNotFound, etc.)  # noqa: E501

        :return: The message_code of this Message.
        :rtype: str
        """
        return self._message_code

    @message_code.setter
    def message_code(self, message_code: str):
        """Sets the message_code of this Message.

        Set to OK for success, or some other short string to indicate and error (e.g., KGUnavailable, TermNotFound, etc.)  # noqa: E501

        :param message_code: The message_code of this Message.
        :type message_code: str
        """

        self._message_code = message_code

    @property
    def code_description(self) -> str:
        """Gets the code_description of this Message.

        Extended description denoting the success or mode of failure in the generation of the message  # noqa: E501

        :return: The code_description of this Message.
        :rtype: str
        """
        return self._code_description

    @code_description.setter
    def code_description(self, code_description: str):
        """Sets the code_description of this Message.

        Extended description denoting the success or mode of failure in the generation of the message  # noqa: E501

        :param code_description: The code_description of this Message.
        :type code_description: str
        """

        self._code_description = code_description

    @property
    def table_column_names(self) -> List[str]:
        """Gets the table_column_names of this Message.

        List of column names that corresponds to the row_data for each result  # noqa: E501

        :return: The table_column_names of this Message.
        :rtype: List[str]
        """
        return self._table_column_names

    @table_column_names.setter
    def table_column_names(self, table_column_names: List[str]):
        """Sets the table_column_names of this Message.

        List of column names that corresponds to the row_data for each result  # noqa: E501

        :param table_column_names: The table_column_names of this Message.
        :type table_column_names: List[str]
        """

        self._table_column_names = table_column_names

    @property
    def original_question(self) -> str:
        """Gets the original_question of this Message.

        The original question text typed in by the user  # noqa: E501

        :return: The original_question of this Message.
        :rtype: str
        """
        return self._original_question

    @original_question.setter
    def original_question(self, original_question: str):
        """Sets the original_question of this Message.

        The original question text typed in by the user  # noqa: E501

        :param original_question: The original_question of this Message.
        :type original_question: str
        """

        self._original_question = original_question

    @property
    def restated_question(self) -> str:
        """Gets the restated_question of this Message.

        A precise restatement of the question, as understood by the Translator, for which the answer applies. The user should verify that the restated question matches the intent of their original question (it might not).  # noqa: E501

        :return: The restated_question of this Message.
        :rtype: str
        """
        return self._restated_question

    @restated_question.setter
    def restated_question(self, restated_question: str):
        """Sets the restated_question of this Message.

        A precise restatement of the question, as understood by the Translator, for which the answer applies. The user should verify that the restated question matches the intent of their original question (it might not).  # noqa: E501

        :param restated_question: The restated_question of this Message.
        :type restated_question: str
        """

        self._restated_question = restated_question

    @property
    def query_type_id(self) -> str:
        """Gets the query_type_id of this Message.

        The query type id if one is known for the query/message (as defined in https://docs.google.com/spreadsheets/d/18zW81wteUfOn3rFRVG0z8mW-ecNhdsfD_6s73ETJnUw/edit#gid=1742835901 )  # noqa: E501

        :return: The query_type_id of this Message.
        :rtype: str
        """
        return self._query_type_id

    @query_type_id.setter
    def query_type_id(self, query_type_id: str):
        """Sets the query_type_id of this Message.

        The query type id if one is known for the query/message (as defined in https://docs.google.com/spreadsheets/d/18zW81wteUfOn3rFRVG0z8mW-ecNhdsfD_6s73ETJnUw/edit#gid=1742835901 )  # noqa: E501

        :param query_type_id: The query_type_id of this Message.
        :type query_type_id: str
        """

        self._query_type_id = query_type_id

    @property
    def terms(self) -> MessageTerms:
        """Gets the terms of this Message.


        :return: The terms of this Message.
        :rtype: MessageTerms
        """
        return self._terms

    @terms.setter
    def terms(self, terms: MessageTerms):
        """Sets the terms of this Message.


        :param terms: The terms of this Message.
        :type terms: MessageTerms
        """

        self._terms = terms

    @property
    def query_options(self) -> object:
        """Gets the query_options of this Message.

        Dict of options that can be sent with the query. Options are tool specific and not stipulated here  # noqa: E501

        :return: The query_options of this Message.
        :rtype: object
        """
        return self._query_options

    @query_options.setter
    def query_options(self, query_options: object):
        """Sets the query_options of this Message.

        Dict of options that can be sent with the query. Options are tool specific and not stipulated here  # noqa: E501

        :param query_options: The query_options of this Message.
        :type query_options: object
        """

        self._query_options = query_options

    @property
    def results(self) -> List[Result]:
        """Gets the results of this Message.

        List of all returned potential answers for the query posed  # noqa: E501

        :return: The results of this Message.
        :rtype: List[Result]
        """
        return self._results

    @results.setter
    def results(self, results: List[Result]):
        """Sets the results of this Message.

        List of all returned potential answers for the query posed  # noqa: E501

        :param results: The results of this Message.
        :type results: List[Result]
        """

        self._results = results

    @property
    def query_graph(self) -> object:
        """Gets the query_graph of this Message.

        QueryGraph object that contains a serialization of a query in the form of a graph  # noqa: E501

        :return: The query_graph of this Message.
        :rtype: object
        """
        return self._query_graph

    @query_graph.setter
    def query_graph(self, query_graph: object):
        """Sets the query_graph of this Message.

        QueryGraph object that contains a serialization of a query in the form of a graph  # noqa: E501

        :param query_graph: The query_graph of this Message.
        :type query_graph: object
        """

        self._query_graph = query_graph

    @property
    def knowledge_graph(self) -> object:
        """Gets the knowledge_graph of this Message.

        KnowledgeGraph object that contains all the nodes and edges referenced in any of the possible answers to the query  # noqa: E501

        :return: The knowledge_graph of this Message.
        :rtype: object
        """
        return self._knowledge_graph

    @knowledge_graph.setter
    def knowledge_graph(self, knowledge_graph: object):
        """Sets the knowledge_graph of this Message.

        KnowledgeGraph object that contains all the nodes and edges referenced in any of the possible answers to the query  # noqa: E501

        :param knowledge_graph: The knowledge_graph of this Message.
        :type knowledge_graph: object
        """

        self._knowledge_graph = knowledge_graph

    @property
    def remote_knowledge_graph(self) -> object:
        """Gets the remote_knowledge_graph of this Message.

        Connection information for a remote knowledge graph that is a substitute for local KnowledgeGraph contained in this Message  # noqa: E501

        :return: The remote_knowledge_graph of this Message.
        :rtype: object
        """
        return self._remote_knowledge_graph

    @remote_knowledge_graph.setter
    def remote_knowledge_graph(self, remote_knowledge_graph: object):
        """Sets the remote_knowledge_graph of this Message.

        Connection information for a remote knowledge graph that is a substitute for local KnowledgeGraph contained in this Message  # noqa: E501

        :param remote_knowledge_graph: The remote_knowledge_graph of this Message.
        :type remote_knowledge_graph: object
        """

        self._remote_knowledge_graph = remote_knowledge_graph

    @property
    def log(self) -> List[str]:
        """Gets the log of this Message.

        List of logged information lines from the ARA, e.g. logged INFO, WARNING, and ERROR message lines  # noqa: E501

        :return: The log of this Message.
        :rtype: List[str]
        """
        return self._log

    @log.setter
    def log(self, log: List[str]):
        """Sets the log of this Message.

        List of logged information lines from the ARA, e.g. logged INFO, WARNING, and ERROR message lines  # noqa: E501

        :param log: The log of this Message.
        :type log: List[str]
        """

        self._log = log

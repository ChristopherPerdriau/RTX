# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.response import Response  # noqa: F401,E501
from swagger_server import util


class ResponseEnvelope(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, response_ur_is: List[str]=None, responses: List[Response]=None, options: List[str]=None):  # noqa: E501
        """ResponseEnvelope - a model defined in Swagger

        :param response_ur_is: The response_ur_is of this ResponseEnvelope.  # noqa: E501
        :type response_ur_is: List[str]
        :param responses: The responses of this ResponseEnvelope.  # noqa: E501
        :type responses: List[Response]
        :param options: The options of this ResponseEnvelope.  # noqa: E501
        :type options: List[str]
        """
        self.swagger_types = {
            'response_ur_is': List[str],
            'responses': List[Response],
            'options': List[str]
        }

        self.attribute_map = {
            'response_ur_is': 'responseURIs',
            'responses': 'responses',
            'options': 'options'
        }

        self._response_ur_is = response_ur_is
        self._responses = responses
        self._options = options

    @classmethod
    def from_dict(cls, dikt) -> 'ResponseEnvelope':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ResponseEnvelope of this ResponseEnvelope.  # noqa: E501
        :rtype: ResponseEnvelope
        """
        return util.deserialize_model(dikt, cls)

    @property
    def response_ur_is(self) -> List[str]:
        """Gets the response_ur_is of this ResponseEnvelope.

        List of URIs for Response objects to fetch and process  # noqa: E501

        :return: The response_ur_is of this ResponseEnvelope.
        :rtype: List[str]
        """
        return self._response_ur_is

    @response_ur_is.setter
    def response_ur_is(self, response_ur_is: List[str]):
        """Sets the response_ur_is of this ResponseEnvelope.

        List of URIs for Response objects to fetch and process  # noqa: E501

        :param response_ur_is: The response_ur_is of this ResponseEnvelope.
        :type response_ur_is: List[str]
        """

        self._response_ur_is = response_ur_is

    @property
    def responses(self) -> List[Response]:
        """Gets the responses of this ResponseEnvelope.

        List of Response objects to process  # noqa: E501

        :return: The responses of this ResponseEnvelope.
        :rtype: List[Response]
        """
        return self._responses

    @responses.setter
    def responses(self, responses: List[Response]):
        """Sets the responses of this ResponseEnvelope.

        List of Response objects to process  # noqa: E501

        :param responses: The responses of this ResponseEnvelope.
        :type responses: List[Response]
        """

        self._responses = responses

    @property
    def options(self) -> List[str]:
        """Gets the options of this ResponseEnvelope.

        List of options to guide what happens with the Response object(s)  # noqa: E501

        :return: The options of this ResponseEnvelope.
        :rtype: List[str]
        """
        return self._options

    @options.setter
    def options(self, options: List[str]):
        """Sets the options of this ResponseEnvelope.

        List of options to guide what happens with the Response object(s)  # noqa: E501

        :param options: The options of this ResponseEnvelope.
        :type options: List[str]
        """

        self._options = options

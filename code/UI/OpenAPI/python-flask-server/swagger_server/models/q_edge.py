# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.biolink_relation import BiolinkRelation  # noqa: F401,E501
from swagger_server import util


class QEdge(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, type: BiolinkRelation=None, relation: str=None, source_id: str=None, target_id: str=None, negated: bool=None, option_group_id: str=None, exclude: bool=None):  # noqa: E501
        """QEdge - a model defined in Swagger

        :param id: The id of this QEdge.  # noqa: E501
        :type id: str
        :param type: The type of this QEdge.  # noqa: E501
        :type type: BiolinkRelation
        :param relation: The relation of this QEdge.  # noqa: E501
        :type relation: str
        :param source_id: The source_id of this QEdge.  # noqa: E501
        :type source_id: str
        :param target_id: The target_id of this QEdge.  # noqa: E501
        :type target_id: str
        :param negated: The negated of this QEdge.  # noqa: E501
        :type negated: bool
        """
        self.swagger_types = {
            'id': str,
            'type': BiolinkRelation,
            'relation': str,
            'source_id': str,
            'target_id': str,
            'negated': bool,
            'option_group_id': str,
            'exclude': bool
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type',
            'relation': 'relation',
            'source_id': 'source_id',
            'target_id': 'target_id',
            'negated': 'negated',
            'option_group_id': 'option_group_id',
            'exclude': 'exclude'
        }

        self._id = id
        self._type = type
        self._relation = relation
        self._source_id = source_id
        self._target_id = target_id
        self._negated = negated
        self._option_group_id = option_group_id
        self._exclude = exclude

    @classmethod
    def from_dict(cls, dikt) -> 'QEdge':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The QEdge of this QEdge.  # noqa: E501
        :rtype: QEdge
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this QEdge.

        QueryGraph internal identifier for this QEdge. Recommended form: e00, e01, e02, etc.  # noqa: E501

        :return: The id of this QEdge.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this QEdge.

        QueryGraph internal identifier for this QEdge. Recommended form: e00, e01, e02, etc.  # noqa: E501

        :param id: The id of this QEdge.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type(self) -> BiolinkRelation:
        """Gets the type of this QEdge.


        :return: The type of this QEdge.
        :rtype: BiolinkRelation
        """
        return self._type

    @type.setter
    def type(self, type: BiolinkRelation):
        """Sets the type of this QEdge.


        :param type: The type of this QEdge.
        :type type: BiolinkRelation
        """

        self._type = type

    @property
    def relation(self) -> str:
        """Gets the relation of this QEdge.

        Lower-level relationship type of this edge  # noqa: E501

        :return: The relation of this QEdge.
        :rtype: str
        """
        return self._relation

    @relation.setter
    def relation(self, relation: str):
        """Sets the relation of this QEdge.

        Lower-level relationship type of this edge  # noqa: E501

        :param relation: The relation of this QEdge.
        :type relation: str
        """

        self._relation = relation

    @property
    def source_id(self) -> str:
        """Gets the source_id of this QEdge.

        Corresponds to the @id of source node of this edge  # noqa: E501

        :return: The source_id of this QEdge.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id: str):
        """Sets the source_id of this QEdge.

        Corresponds to the @id of source node of this edge  # noqa: E501

        :param source_id: The source_id of this QEdge.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")  # noqa: E501

        self._source_id = source_id

    @property
    def target_id(self) -> str:
        """Gets the target_id of this QEdge.

        Corresponds to the @id of target node of this edge  # noqa: E501

        :return: The target_id of this QEdge.
        :rtype: str
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id: str):
        """Sets the target_id of this QEdge.

        Corresponds to the @id of target node of this edge  # noqa: E501

        :param target_id: The target_id of this QEdge.
        :type target_id: str
        """
        if target_id is None:
            raise ValueError("Invalid value for `target_id`, must not be `None`")  # noqa: E501

        self._target_id = target_id

    @property
    def negated(self) -> bool:
        """Gets the negated of this QEdge.

        Boolean that if set to true, indicates the edge statement is negated i.e. is not true  # noqa: E501

        :return: The negated of this QEdge.
        :rtype: bool
        """
        return self._negated

    @negated.setter
    def negated(self, negated: bool):
        """Sets the negated of this QEdge.

        Boolean that if set to true, indicates the edge statement is negated i.e. is not true  # noqa: E501

        :param negated: The negated of this QEdge.
        :type negated: bool
        """

        self._negated = negated

    @property
    def option_group_id(self) -> str:
        """Gets the option_group_id of this QEdge.

        Corresponds to the @id for the option group of this edge  # noqa: E501

        :return: The option_group_id of this QEdge.
        :rtype: str
        """
        return self._option_group_id

    @option_group_id.setter
    def option_group_id(self, option_group_id: str):
        """Sets the option_group_id of this QEdge.

        Corresponds to the @id for the option group of this edge  # noqa: E501

        :param option_group_id: The option_group_id of this QEdge.
        :type option_group_id: str
        """
        self._option_group_id = option_group_id

    @property
    def exclude(self) -> bool:
        """Gets the exclude of this QEdge.

        Boolean that if set to true, excludes all resulting subgraphs with this edge.  # noqa: E501

        :return: The exclude of this QEdge.
        :rtype: bool
        """
        return self._exclude

    @exclude.setter
    def exclude(self, exclude: bool):
        """Sets the exclude of this QEdge.

        Boolean that if set to true, excludes all resulting subgraphs with this edge.  # noqa: E501

        :param exclude: The exclude of this QEdge.
        :type exclude: bool
        """

        self._exclude = exclude

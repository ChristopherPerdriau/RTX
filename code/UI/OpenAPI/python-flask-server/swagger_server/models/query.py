# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Query(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, original_question: str=None, restated_question: str=None, message: str=None, known_query_type_id: str=None, terms: List[str]=None):  # noqa: E501
        """Query - a model defined in Swagger

        :param original_question: The original_question of this Query.  # noqa: E501
        :type original_question: str
        :param restated_question: The restated_question of this Query.  # noqa: E501
        :type restated_question: str
        :param message: The message of this Query.  # noqa: E501
        :type message: str
        :param known_query_type_id: The known_query_type_id of this Query.  # noqa: E501
        :type known_query_type_id: str
        :param terms: The terms of this Query.  # noqa: E501
        :type terms: List[str]
        """
        self.swagger_types = {
            'original_question': str,
            'restated_question': str,
            'message': str,
            'known_query_type_id': str,
            'terms': List[str]
        }

        self.attribute_map = {
            'original_question': 'originalQuestion',
            'restated_question': 'restatedQuestion',
            'message': 'message',
            'known_query_type_id': 'knownQueryTypeId',
            'terms': 'terms'
        }

        self._original_question = original_question
        self._restated_question = restated_question
        self._message = message
        self._known_query_type_id = known_query_type_id
        self._terms = terms

    @classmethod
    def from_dict(cls, dikt) -> 'Query':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Query of this Query.  # noqa: E501
        :rtype: Query
        """
        return util.deserialize_model(dikt, cls)

    @property
    def original_question(self) -> str:
        """Gets the original_question of this Query.

        Original question as it was typed in by the user  # noqa: E501

        :return: The original_question of this Query.
        :rtype: str
        """
        return self._original_question

    @original_question.setter
    def original_question(self, original_question: str):
        """Sets the original_question of this Query.

        Original question as it was typed in by the user  # noqa: E501

        :param original_question: The original_question of this Query.
        :type original_question: str
        """

        self._original_question = original_question

    @property
    def restated_question(self) -> str:
        """Gets the restated_question of this Query.

        Restatement of the question as understood by the translator  # noqa: E501

        :return: The restated_question of this Query.
        :rtype: str
        """
        return self._restated_question

    @restated_question.setter
    def restated_question(self, restated_question: str):
        """Sets the restated_question of this Query.

        Restatement of the question as understood by the translator  # noqa: E501

        :param restated_question: The restated_question of this Query.
        :type restated_question: str
        """

        self._restated_question = restated_question

    @property
    def message(self) -> str:
        """Gets the message of this Query.

        Response from the translation engine to the user  # noqa: E501

        :return: The message of this Query.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this Query.

        Response from the translation engine to the user  # noqa: E501

        :param message: The message of this Query.
        :type message: str
        """

        self._message = message

    @property
    def known_query_type_id(self) -> str:
        """Gets the known_query_type_id of this Query.

        RTX identifier for the specific query type  # noqa: E501

        :return: The known_query_type_id of this Query.
        :rtype: str
        """
        return self._known_query_type_id

    @known_query_type_id.setter
    def known_query_type_id(self, known_query_type_id: str):
        """Sets the known_query_type_id of this Query.

        RTX identifier for the specific query type  # noqa: E501

        :param known_query_type_id: The known_query_type_id of this Query.
        :type known_query_type_id: str
        """

        self._known_query_type_id = known_query_type_id

    @property
    def terms(self) -> List[str]:
        """Gets the terms of this Query.

        Ordered list of terms needed by the specific query type  # noqa: E501

        :return: The terms of this Query.
        :rtype: List[str]
        """
        return self._terms

    @terms.setter
    def terms(self, terms: List[str]):
        """Sets the terms of this Query.

        Ordered list of terms needed by the specific query type  # noqa: E501

        :param terms: The terms of this Query.
        :type terms: List[str]
        """

        self._terms = terms

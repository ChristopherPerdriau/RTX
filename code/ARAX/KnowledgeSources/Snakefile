import os
import sys
import datetime
import json
import time
import argparse

# os.path.realpath(__file__) does not work here since snakemake runs a different python file in the install directory
pathlist = os.path.getcwd().split(os.path.sep)
RTXindex = pathlist.index("RTX")
sys.path.append(os.path.sep.join([*pathlist[:(RTXindex + 1)], 'code']))
from RTXConfiguration import RTXConfiguration

RTXConfig = RTXConfiguration()
RTXConfig.live = "KG2"

python = "python3.7"

pred_filepath = os.path.sep.join([*pathlist[:(RTXindex + 1)], 'code', 'ARAX', 'KnowledgeSources', 'Prediction'])
if not  os.path.exists(pred_filepath):
    os.system(f"mkdir -p {pred_filepath}")

ngd_filepath = os.path.sep.join([*pathlist[:(RTXindex + 1)], 'code', 'ARAX', 'KnowledgeSources', 'NormalizedGoogleDistance'])
if not  os.path.exists(ngd_filepath):
    os.system(f"mkdir -p {ngd_filepath}")

cohd_filepath = os.path.sep.join([*pathlist[:(RTXindex + 1)], 'code', 'ARAX', 'KnowledgeSources', 'COHD_local', 'data'])
if not  os.path.exists(cohd_filepath):
    os.system(f"mkdir -p {cohd_filepath}")

synonymizer_filepath = os.path.sep.join([*pathlist[:(RTXindex + 1)], 'code', 'ARAX', 'NodeSynonymizer'])
if not  os.path.exists(synonymizer_filepath):
    os.system(f"mkdir -p {synonymizer_filepath}")

rule all:
    input:
        f"{synonymizer_filepath}{os.path.sep}{RTXConfig.node_synonymizer_path.split('/')[-1]}",
        f"{ngd_filepath}{os.path.sep}{self.RTXConfig.curie_to_pmids_path.split('/')[-1]}"

KGmetadata_path = os.path.sep.join([*pathlist[:(RTXindex + 1)], 'data', 'KGmetadata'])

rule KGmetadata:
    output:
        f"{KGmetadata_path}{os.path.sep}EdgeTypes.tsv",
        f"{KGmetadata_path}{os.path.sep}NodeLabels.tsv",
        f"{KGmetadata_path}{os.path.sep}NodeNamesDescriptions_KG1.tsv",
        f"{KGmetadata_path}{os.path.sep}NodeNamesDescriptions_KG2.tsv"
    shell:
        f"""
        (
        cd {KGmetadata_path}
        {python} dumpdata.py
        )
        """

rule node_synonymizer:
    input:
        f"{KGmetadata_path}{os.path.sep}EdgeTypes.tsv",
        f"{KGmetadata_path}{os.path.sep}NodeLabels.tsv",
        f"{KGmetadata_path}{os.path.sep}NodeNamesDescriptions_KG1.tsv",
        f"{KGmetadata_path}{os.path.sep}NodeNamesDescriptions_KG2.tsv"
    output:
        f"{synonymizer_filepath}{os.path.sep}{RTXConfig.node_synonymizer_path.split('/')[-1]}"
    shell:
        f"""
        (
        cd {synonymizer_filepath}
        {python} sri_node_normalizer.py --build
        {python} node_synonymizer.py --build --kg_name=both
        )
        """

pubmed_xml_path = f"{os.path.sep.join([*pathlist[:(RTXindex + 1)], 'code', 'ARAX', 'ARAXQuery', 'Overlay', 'ngd'])}"

rule curie_to_pmid:
    input:
        f"{pubmed_xml_path}"
    output:
        f"{ngd_filepath}{os.path.sep}{self.RTXConfig.curie_to_pmids_path.split('/')[-1]}"
    shell:
        f"""
        cd {os.path.sep.join([*pathlist[:(RTXindex + 1)], 'code', 'ARAX', 'ARAXQuery', 'Overlay', 'ngd'])}
        {python} build_ngd_database.py {pubmed_xml_path} --full
        mv curie_to_pmids.sqlite {ngd_filepath}{os.path.sep}{self.RTXConfig.curie_to_pmids_path.split('/')[-1]}
        """


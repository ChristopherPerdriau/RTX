ARAX_QG_DSL_mapping: 0.1
templates:

  #### One node questions
  one_node_with_curie:
    name: One node what is question
    restated_question: What is n00(name)?
    description: A single node question, where the one node has a curie
    template:
      - n00(curie)
    DSL:
      - expand(node_id=n00)
      - resultify()

  one_node_with_type:
    name: One node with only a type
    description: A single node that has no curie but has a type. This could easily generate thousands of things.
    restated_question: Which n00(type)s are known?
    template:
      - n00(type)
    error: The input QueryGraph would just lead to thousands of nodes with this type. Not currently supported.

  one_node_with_no_type:
    name: One node with not even a type
    description: A single node that has no curie and no type. This is like tell me everything
    restated_question: Which biological entities are known?
    template:
      - n00()
    error: The input QueryGraph would yield all nodes in our knowledge graph. Not currently supported.

  ####################################################################################################
  #### Two node, one-hop questions
  one_hop_classic_question:
    name: One hop question with one curie and one typed node
    description: Two nodes, one of which has a curie and the other has a type
    restated_question: Which n01(type)s are related to n00(name)?
    template:
      - n00(curie)
      - e00()
      - n01(type)
    DSL:
      - expand(edge_id=e00)
      - overlay(action=compute_ngd, virtual_relation_label=N1, source_qnode_id=n00, target_qnode_id=n01)
      - resultify()

  one_hop_two_curie_question:
    name: One hop question where both nodes are provided
    description: Two nodes, both of which have a curie
    restated_question: How are n00(name) and n01(name) directly related?
    template:
      - n00(curie)
      - e00()
      - n01(curie)
    DSL:
      - expand(edge_id=e00)
      - resultify()

  one_hop_all_connections:
    name: One hop question with one curie and one totally generic
    description: Two nodes, one of which has a curie and the other has no type
    restated_question: What is n00(name) related to?
    template:
      - n00(curie)
      - e00()
      - n01()
    DSL:
      - expand(edge_id=e00)
      - resultify()

  ####################################################################################################
  #### Three node, two-hop questions
  two_hop_classic_question:
    name: Two hop question with one curie and two typed nodes
    description: Three nodes, one of which has a curie and the other two have a type
    restated_question: Which n02(type)s share the most n01(type)s in common with n00(name)?
    template:
      - n00(curie)
      - e00()
      - n01(type)
      - e01()
      - n02(type)
    DSL:
      - expand(edge_id=[e00,e01])
      - overlay(action=compute_jaccard, start_node_id=n00, intermediate_node_id=n01, end_node_id=n02, virtual_relation_label=J1)
      - resultify()

  two_hop_curie-type-curie_question:
    name: Two hop question where both end nodes are provided and a type in the middle
    description: Three nodes, the two ends of which have a curie
    restated_question: Which n01(type)s connect n00(name) and n02(name)?
    template:
      - n00(curie)
      - e00()
      - n01(type)
      - e01()
      - n02(curie)
    DSL:
      - expand(edge_id=[e00,e01])
      - resultify()

  two_hop_two_curie_question:
    name: Two hop question where both end nodes are provided and no type in the middle
    description: Three nodes, the two ends of which have a curie and no type in the middle
    restated_question: which n01(type)s connect n00(name) and n02(name)?
    template:
      - n00(curie)
      - e00()
      - n01()
      - e01()
      - n02(curie)
    DSL:
      - expand(edge_id=[e00,e01])
      - resultify()




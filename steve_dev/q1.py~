## Development python script for NCATS Translator Reasoning Tool Q1
## Author: Stephen Ramsey, OSU

import neo4j.v1

class Whiteboard:
    WHITEBOARD_NEO4J_USERNAME="neo4j"
    WHITEBOARD_NEO4J_PASSWORD="precisionmedicine"
    WHITEBOARD_NEO4J_URL="bolt://localhost:7687"
    debug=True
## get a driver for the 


    def __init__(self):
        self.driver = neo4j.v1.GraphDatabase.driver(self.WHITEBOARD_NEO4J_URL,
                                                    auth=(self.WHITEBOARD_NEO4J_USERNAME,
                                                          self.WHITEBOARD_NEO4J_PASSWORD))
        self.session = self.driver.session()

    def run_cypher_query(self, query_string):
        """runs a single cypher query in the neo4j database (without a transaction) and returns the result object
        :param query_string: a ``str`` object containing a single cypher query (without a semicolon)
        :returns: a `neo4j.v1.SessionResult` object resulting from executing the neo4j query
        """
        
        assert (';' not in query_string)
        if (self.debug): print(query_string)
        return(self.driver.session().run(query_string))

    def add_node(self, node_labels, node_properties):
        """creates one node in the neo4j database, with user-defined labels and properties

        :param node_labels: a ``set`` containing strings; strings must be valid neo4j label names
        :param node_properties: a ``dict`` containing property key-value pairs; keys must be valid neo4j property key names
        :returns: a ``neo4j.v1.Record`` containing the ID of the node that has been added ``<Record ID(n)=n>`` where for instance, ``n=5`` if the added node's Neo4j ID is 5.
        """
        assert type(node_labels) == set
        assert type(node_properties) == dict

        ## construct the label clause of the cypher query
        label_string = ':'.join(node_labels)
        ## construct the properties clause of the cypher query
        property_string =  "{" + (', '.join("{!s}:{!r}".format(key,val) for (key,val) in node_properties.items())) + "}"
        cypher_query = "CREATE (n:" + label_string + " " + property_string + ") return ID(n)"

        ## run the query
        res = self.run_cypher_query(cypher_query)
        return(next(res.records()))

    def clear_blackboard(self):
        self.run_cypher_query("MATCH (n) DETACH DELETE n")
        
## function to put a node in Neo4j
wb = Whiteboard()
print(wb.add_node(set(["protein","complex_member"]),{"name": "IL6", "source": "pathway_commons"}))
wb.clear_blackboard()
